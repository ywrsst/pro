#include <iostream>
#include <queue>

const int ROW_SIZE = 5;
const int COL_SIZE = 5;

struct Point {
    int row;
    int col;
};

void PrintMap(char map[][COL_SIZE]) {
    for (int i = 0; i < ROW_SIZE; i++) {
        for (int j = 0; j < COL_SIZE; j++) {
            if (map[i][j] == '#') {
                std::cout << "■ ";  // 장애물은 검은색 블록으로 표시
            }
            else if (map[i][j] == 'S') {
                std::cout << "S ";  // 시작점은 초록색 블록으로 표시
            }
            else if (map[i][j] == 'E') {
                std::cout << "E ";  // 도착점은 빨간색 블록으로 표시
            }
            else if (map[i][j] == '-') {
                std::cout << "  ";  // 빈 공간은 흰색 블록으로 표시
            }
        }
        std::cout << std::endl;
    }
}

bool BFS(char map[][COL_SIZE], Point start, Point end) {
    bool visited[ROW_SIZE][COL_SIZE] = { false, };
    std::queue<Point> q;

    q.push(start);
    visited[start.row][start.col] = true;

    while (!q.empty()) {
        Point current = q.front();
        q.pop();

        if (current.row == end.row && current.col == end.col) {
            return true;  // 도착점에 도달한 경우 true 반환
        }

        // 이동 가능한 위치들을 차례대로 검사
        Point deltas[4] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
        for (int i = 0; i < 4; i++) {
            int nextRow = current.row + deltas[i].row;
            int nextCol = current.col + deltas[i].col;
            if (nextRow >= 0 && nextRow < ROW_SIZE && nextCol >= 0 && nextCol < COL_SIZE
                && map[nextRow][nextCol] != '#' && !visited[nextRow][nextCol]) {
                Point next = { nextRow, nextCol };
                q.push(next);
                visited[nextRow][nextCol] = true;
            }
        }
    }

    return false;  // 도착점에 도달하지 못한 경우 false 반환
}

int main() {
    char map[ROW_SIZE][COL_SIZE] = {
        {'-', '-', '-', '-', '-'},
        {'-', '-', '#', '-', '-'},
        {'-', '-', '#', '-', '-'},
        {'-', '-', '#', '-', '-'},
        {'S', '-', '#', '-', 'E'}
    };

    Point start = { 4, 0 };
    Point end = { 4, 4 };

    std::cout << "최단 경로 찾기 결과 : " << std::boolalpha << BFS(map, start, end) << std::endl;

    PrintMap(map);

    return 0;
}

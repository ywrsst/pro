#include <iostream>
#include <queue>

const int ROW_SIZE = 5;
const int COL_SIZE = 5;

struct Point {
    int row;
    int col;
};

void PrintMap(char map[][COL_SIZE]) {
    for (int i = 0; i < ROW_SIZE; i++) {
        for (int j = 0; j < COL_SIZE; j++) {
            std::cout << map[i][j] << ' ';
        }
        std::cout << std::endl;
    }
}

Point FindPlayer(char map[][COL_SIZE], Point start) {
    bool visited[ROW_SIZE][COL_SIZE] = { false, };
    std::queue<Point> q;
    Point found = { -1, -1 };

    q.push(start);
    visited[start.row][start.col] = true;

    while (!q.empty()) {
        Point current = q.front();
        q.pop();

        if (map[current.row][current.col] == 'P') {
            found = current;
            break;
        }

        // 이동 가능한 위치들을 차례대로 검사
        Point deltas[4] = { {-1, 0}, {1, 0}, {0, -1}, {0, 1} };
        for (int i = 0; i < 4; i++) {
            int nextRow = current.row + deltas[i].row;
            int nextCol = current.col + deltas[i].col;
            if (nextRow >= 0 && nextRow < ROW_SIZE && nextCol >= 0 && nextCol < COL_SIZE
                && map[nextRow][nextCol] != 'X' && !visited[nextRow][nextCol]) {
                Point next = { nextRow, nextCol };
                q.push(next);
                visited[nextRow][nextCol] = true;
            }
        }
    }

    return found;
}

int main() {
    char map[ROW_SIZE][COL_SIZE] = {
        {'-', '-', '-', '-', '-'},
        {'-', 'X', '-', '-', '-'},
        {'-', 'X', '-', 'P', '-'},
        {'-', 'X', '-', '-', '-'},
        {'-', '-', '-', '-', '-'}
    };

    Point start = { 0, 0 };
    Point player = FindPlayer(map, start);

    std::cout << "플레이어 위치 행 : " << player.row << ", 플레이어 위치 열 : " << player.col << std::endl;

    PrintMap(map);

    return 0;
}
